name: CI Pipeline

on:
  pull_request:
    branches: [ develop, master ]
  push:
    branches: [ develop ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}

jobs:
  # 后端代码检查和构建
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./vocata-server

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 缓存 Maven 依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 验证 Maven 配置
      run: mvn validate

    - name: 编译项目
      run: mvn clean compile -DskipTests

    - name: 代码风格检查
      run: |
        if [ -f "checkstyle.xml" ]; then
          mvn checkstyle:check
        else
          echo "未找到checkstyle.xml，跳过代码风格检查"
        fi

    - name: 运行单元测试
      run: mvn test
      continue-on-error: true

    - name: 生成测试报告
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 后端测试报告
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit

    - name: 构建 JAR 包
      run: mvn package -DskipTests

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: vocata-server-jar
        path: vocata-server/target/*.jar
        retention-days: 7

  # 前端客户端代码检查和构建
  frontend-web-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./vocata-web

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: vocata-web/package-lock.json

    - name: 安装依赖
      run: npm ci

    - name: TypeScript 类型检查
      run: npm run type-check

    - name: ESLint 代码检查
      run: npm run lint

    - name: 构建测试版本
      run: npm run build:test

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: vocata-web-dist
        path: vocata-web/dist/
        retention-days: 7

  # 前端管理后台代码检查和构建
  frontend-admin-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./vocata-admin

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: vocata-admin/package-lock.json

    - name: 安装依赖
      run: npm ci

    - name: TypeScript 类型检查
      run: npm run type-check

    - name: ESLint 代码检查
      run: npm run lint

    - name: 构建测试版本
      run: npm run build:test

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: vocata-admin-dist
        path: vocata-admin/dist/
        retention-days: 7

  # 汇总 CI 结果
  ci-summary:
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-web-ci, frontend-admin-ci]
    if: always()

    steps:
    - name: CI 结果汇总
      run: |
        echo "## CI 流水线执行结果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 组件 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 后端服务 | ${{ needs.backend-ci.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 前端客户端 | ${{ needs.frontend-web-ci.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 管理后台 | ${{ needs.frontend-admin-ci.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.backend-ci.result }}" == "success" && "${{ needs.frontend-web-ci.result }}" == "success" && "${{ needs.frontend-admin-ci.result }}" == "success" ]]; then
          echo ""  >> $GITHUB_STEP_SUMMARY
          echo "🎉 所有组件 CI 检查通过，可以进行合并操作！" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ 部分组件 CI 检查失败，请修复后重新提交。" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi