name: Production CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  # 手动触发生产部署
  workflow_dispatch:
    inputs:
      version:
        description: '部署版本号 (如: v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}
  JAVA_VERSION: '17'
  NODE_VERSION: '20'

jobs:
  # 预检查任务
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.check.outputs.should-deploy }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 提取版本信息
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "处理版本: ${VERSION}"

    - name: 预检查
      id: check
      run: |
        VERSION="${{ steps.version.outputs.version }}"

        # 检查版本格式
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ 版本格式不正确: $VERSION (应为 vX.Y.Z)"
          exit 1
        fi

        # 检查当前分支是否为master
        if [ "${{ github.ref_name }}" != "master" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          echo "❌ 生产部署只能从master分支进行"
          exit 1
        fi

        echo "✅ 预检查通过"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

  # 构建和推送生产镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service:
          - name: vocata-server
            context: ./vocata-server
            dockerfile: ./vocata-server/Dockerfile
            port: 9010
          - name: vocata-web
            context: ./vocata-web
            dockerfile: ./vocata-web/Dockerfile
            port: 80
          - name: vocata-admin
            context: ./vocata-admin
            dockerfile: ./vocata-admin/Dockerfile
            port: 80

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 JDK ${{ env.JAVA_VERSION }}
      if: matrix.service.name == 'vocata-server'
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 设置 Node.js ${{ env.NODE_VERSION }}
      if: matrix.service.name != 'vocata-server'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service.name }}/package-lock.json

    - name: 缓存 Maven 依赖
      if: matrix.service.name == 'vocata-server'
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: 构建后端应用
      if: matrix.service.name == 'vocata-server'
      working-directory: ./vocata-server
      run: |
        mvn clean package -DskipTests -Dspring.profiles.active=prod
        echo "JAR_FILE=$(find target -name '*.jar' | head -1)" >> $GITHUB_ENV

    - name: 构建前端应用
      if: matrix.service.name != 'vocata-server'
      working-directory: ${{ matrix.service.context }}
      run: |
        npm ci
        npm run build:prod

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录到GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取版本信息
      id: version
      run: |
        VERSION="${{ needs.pre-check.outputs.version }}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "major_version=${VERSION%.*.*}" >> $GITHUB_OUTPUT

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service.name }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          type=raw,value=${{ steps.version.outputs.major_version }}

    - name: 构建并推送生产镜像
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ steps.version.outputs.version }}

    outputs:
      version: ${{ steps.version.outputs.version }}
      server-image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/vocata-server:${{ steps.version.outputs.version }}
      web-image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/vocata-web:${{ steps.version.outputs.version }}
      admin-image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/vocata-admin:${{ steps.version.outputs.version }}

  # 蓝绿部署到生产环境
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [pre-check, build-and-push]
    environment:
      name: production
      url: https://vocata.com

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 准备部署文件
      run: |
        # 创建部署目录
        mkdir -p deploy/production

        # 复制Docker Compose配置
        cp docker-compose.prod.yml deploy/production/docker-compose.yml

        # 设置环境变量
        cat > deploy/production/.env << EOF
        # VocaTa Production Environment Configuration
        COMPOSE_PROJECT_NAME=vocata-prod

        # 版本信息
        VERSION=${{ needs.build-and-push.outputs.version }}

        # 镜像配置
        SERVER_IMAGE=${{ needs.build-and-push.outputs.server-image }}
        WEB_IMAGE=${{ needs.build-and-push.outputs.web-image }}
        ADMIN_IMAGE=${{ needs.build-and-push.outputs.admin-image }}

        # 数据库配置
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        # Redis配置
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        REDIS_DATABASE=${{ secrets.REDIS_DATABASE }}

        # 七牛云配置
        QINIU_ACCESS_KEY=${{ secrets.QINIU_ACCESS_KEY }}
        QINIU_SECRET_KEY=${{ secrets.QINIU_SECRET_KEY }}
        QINIU_BUCKET=${{ secrets.QINIU_BUCKET }}
        QINIU_DOMAIN=${{ secrets.QINIU_DOMAIN }}
        QINIU_REGION=${{ secrets.QINIU_REGION }}

        # 163邮箱SMTP配置
        EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
        EMAIL_USER_PASSWORD=${{ secrets.EMAIL_USER_PASSWORD }}

        # 应用配置
        SERVER_PORT=9010
        WEB_PORT=80
        ADMIN_PORT=80

        # 环境标识
        SPRING_PROFILES_ACTIVE=prod
        EOF

        # 创建备份脚本
        cat > deploy/production/backup.sh << 'EOF'
        #!/bin/bash
        set -e

        BACKUP_DIR="/var/backups/vocata"
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)

        echo "开始备份..."

        # 创建备份目录
        mkdir -p $BACKUP_DIR

        # 备份数据库
        echo "备份数据库..."
        PGPASSWORD=$DB_PASSWORD pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USERNAME -d $DB_NAME > $BACKUP_DIR/vocata_${TIMESTAMP}.sql

        # 备份Docker镜像信息
        echo "备份当前镜像信息..."
        docker images | grep vocata > $BACKUP_DIR/images_${TIMESTAMP}.txt || true

        # 备份当前环境变量
        cp .env $BACKUP_DIR/env_${TIMESTAMP}.backup

        # 清理旧备份文件（保留7天）
        find $BACKUP_DIR -name "*.sql" -mtime +7 -delete || true
        find $BACKUP_DIR -name "*.txt" -mtime +7 -delete || true
        find $BACKUP_DIR -name "*.backup" -mtime +7 -delete || true

        echo "✅ 备份完成: $BACKUP_DIR/vocata_${TIMESTAMP}.sql"
        EOF

        chmod +x deploy/production/backup.sh

        # 创建蓝绿部署脚本
        cat > deploy/production/blue-green-deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        # 颜色输出
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color

        log_info() {
            echo -e "${BLUE}[INFO]${NC} $1"
        }

        log_success() {
            echo -e "${GREEN}[SUCCESS]${NC} $1"
        }

        log_warning() {
            echo -e "${YELLOW}[WARNING]${NC} $1"
        }

        log_error() {
            echo -e "${RED}[ERROR]${NC} $1"
        }

        # 环境设置
        BLUE_ENV="vocata-blue"
        GREEN_ENV="vocata-green"
        PROD_ENV="vocata-prod"

        # 检查当前活跃环境
        get_active_env() {
            if docker-compose -p $PROD_ENV ps -q > /dev/null 2>&1 && [ $(docker-compose -p $PROD_ENV ps -q | wc -l) -gt 0 ]; then
                echo $PROD_ENV
            elif docker-compose -p $BLUE_ENV ps -q > /dev/null 2>&1 && [ $(docker-compose -p $BLUE_ENV ps -q | wc -l) -gt 0 ]; then
                echo $BLUE_ENV
            elif docker-compose -p $GREEN_ENV ps -q > /dev/null 2>&1 && [ $(docker-compose -p $GREEN_ENV ps -q | wc -l) -gt 0 ]; then
                echo $GREEN_ENV
            else
                echo ""
            fi
        }

        # 健康检查函数
        health_check() {
            local env_name=$1
            local max_attempts=30
            local attempt=1

            log_info "开始健康检查: $env_name"

            while [ $attempt -le $max_attempts ]; do
                if docker-compose -p $env_name exec -T vocata-server curl -f http://localhost:9010/api/actuator/health > /dev/null 2>&1; then
                    log_success "$env_name 健康检查通过"
                    return 0
                else
                    log_info "健康检查 $env_name ($attempt/$max_attempts)..."
                    sleep 10
                    ((attempt++))
                fi
            done

            log_error "$env_name 健康检查失败"
            return 1
        }

        # 流量切换函数 (需要根据实际负载均衡器配置)
        switch_traffic() {
            local target_env=$1
            log_info "切换流量到: $target_env"

            # 这里需要根据实际的负载均衡配置进行调整
            # 例如更新 Nginx upstream 或者 HAProxy 配置
            # 示例代码（需要根据实际情况调整）:
            # sudo sed -i "s/server .*:9010/server ${target_env}_vocata-server:9010/" /etc/nginx/upstream.conf
            # sudo nginx -s reload

            log_success "流量切换完成"
        }

        # 主要部署逻辑
        main() {
            log_info "开始蓝绿部署..."

            # 登录Docker Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # 执行备份
            log_info "执行部署前备份..."
            ./backup.sh

            # 确定当前活跃环境和新环境
            CURRENT_ENV=$(get_active_env)
            if [ "$CURRENT_ENV" = "$BLUE_ENV" ]; then
                TARGET_ENV=$GREEN_ENV
            else
                TARGET_ENV=$BLUE_ENV
            fi

            log_info "当前环境: ${CURRENT_ENV:-"无"}"
            log_info "目标环境: $TARGET_ENV"

            # 部署新环境
            log_info "部署新环境: $TARGET_ENV"
            COMPOSE_PROJECT_NAME=$TARGET_ENV docker-compose pull
            COMPOSE_PROJECT_NAME=$TARGET_ENV docker-compose up -d

            # 等待服务启动
            log_info "等待服务启动..."
            sleep 60

            # 健康检查新环境
            if health_check $TARGET_ENV; then
                log_success "新环境健康检查通过，开始切换流量..."

                # 切换流量到新环境
                switch_traffic $TARGET_ENV

                # 等待流量切换生效
                sleep 30

                # 停止旧环境
                if [ -n "$CURRENT_ENV" ]; then
                    log_info "停止旧环境: $CURRENT_ENV"
                    COMPOSE_PROJECT_NAME=$CURRENT_ENV docker-compose down || true
                fi

                # 将新环境重命名为生产环境
                log_info "切换环境标识到生产..."
                COMPOSE_PROJECT_NAME=$TARGET_ENV docker-compose down
                docker-compose up -d

                log_success "🎉 生产环境部署成功！版本: $VERSION"
            else
                log_error "新环境健康检查失败，回滚部署..."

                # 停止失败的新环境
                COMPOSE_PROJECT_NAME=$TARGET_ENV docker-compose down

                # 显示日志用于调试
                log_info "显示失败的环境日志:"
                COMPOSE_PROJECT_NAME=$TARGET_ENV docker-compose logs || true

                exit 1
            fi

            # 清理旧镜像
            log_info "清理旧镜像..."
            docker system prune -f || true

            log_success "部署完成！"
        }

        main "$@"
        EOF

        chmod +x deploy/production/blue-green-deploy.sh

        # 创建回滚脚本
        cat > deploy/production/rollback.sh << 'EOF'
        #!/bin/bash
        set -e

        if [ -z "$1" ]; then
            echo "用法: $0 <version>"
            echo "可用版本:"
            docker images ghcr.io/${{ github.repository_owner }}/vocata-server --format "table {{.Tag}}" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -10
            exit 1
        fi

        ROLLBACK_VERSION=$1
        REGISTRY="ghcr.io/${{ github.repository_owner }}"

        echo "🔄 开始回滚到版本: $ROLLBACK_VERSION"

        # 备份当前状态
        ./backup.sh

        # 更新环境变量文件
        sed -i "s/VERSION=.*/VERSION=$ROLLBACK_VERSION/" .env
        sed -i "s|SERVER_IMAGE=.*|SERVER_IMAGE=$REGISTRY/vocata-server:$ROLLBACK_VERSION|" .env
        sed -i "s|WEB_IMAGE=.*|WEB_IMAGE=$REGISTRY/vocata-web:$ROLLBACK_VERSION|" .env
        sed -i "s|ADMIN_IMAGE=.*|ADMIN_IMAGE=$REGISTRY/vocata-admin:$ROLLBACK_VERSION|" .env

        # 拉取镜像
        docker-compose pull

        # 重新部署
        docker-compose up -d

        # 健康检查
        sleep 60
        for i in {1..10}; do
            if curl -f http://localhost:9010/api/actuator/health > /dev/null 2>&1; then
                echo "✅ 回滚成功！版本: $ROLLBACK_VERSION"
                exit 0
            else
                echo "⏳ 等待服务启动... ($i/10)"
                sleep 10
            fi
        done

        echo "❌ 回滚后健康检查失败"
        docker-compose logs
        exit 1
        EOF

        chmod +x deploy/production/rollback.sh

    - name: 复制文件到生产服务器
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        source: "deploy/production/*"
        target: "/home/deploy/vocata/"
        strip_components: 2

    - name: 蓝绿部署到生产服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: 22
        envs: VERSION
        script: |
          cd /home/deploy/vocata
          export VERSION="${{ needs.build-and-push.outputs.version }}"
          ./blue-green-deploy.sh

    - name: 生产环境健康检查
      run: |
        echo "等待服务完全启动..."
        sleep 120

        echo "## 🚀 生产环境部署报告 - ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # 检查后端API
        if curl -f "https://api.vocata.com/actuator/health" > /dev/null 2>&1; then
          echo "✅ 后端API服务正常" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 后端API服务异常" >> $GITHUB_STEP_SUMMARY
        fi

        # 检查前端客户端
        if curl -f "https://vocata.com" > /dev/null 2>&1; then
          echo "✅ 前端客户端正常" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 前端客户端异常" >> $GITHUB_STEP_SUMMARY
        fi

        # 检查管理后台
        if curl -f "https://admin.vocata.com" > /dev/null 2>&1; then
          echo "✅ 管理后台正常" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 管理后台异常" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 部署信息：" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **部署时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **提交**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **快速访问**:" >> $GITHUB_STEP_SUMMARY
        echo "- [客户端](https://vocata.com)" >> $GITHUB_STEP_SUMMARY
        echo "- [管理后台](https://admin.vocata.com)" >> $GITHUB_STEP_SUMMARY
        echo "- [API文档](https://api.vocata.com/swagger-ui.html)" >> $GITHUB_STEP_SUMMARY

  # 创建 GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [pre-check, build-and-push, deploy-to-production]
    if: success() && github.event_name != 'workflow_dispatch'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 生成发版说明
      id: changelog
      run: |
        # 获取上一个标签
        PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

        if [ -n "$PREV_TAG" ]; then
          # 生成更改日志
          CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges | head -20)
        fi

        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 创建 GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.build-and-push.outputs.version }}
        name: VocaTa ${{ needs.build-and-push.outputs.version }}
        body: |
          ## 🚀 VocaTa ${{ needs.build-and-push.outputs.version }} 发版说明

          ### ✨ 主要更新
          ${{ steps.changelog.outputs.CHANGELOG }}

          ### 📦 Docker 镜像
          - `${{ needs.build-and-push.outputs.server-image }}`
          - `${{ needs.build-and-push.outputs.web-image }}`
          - `${{ needs.build-and-push.outputs.admin-image }}`

          ### 🌐 访问地址
          - [客户端](https://vocata.com)
          - [管理后台](https://admin.vocata.com)
          - [API 文档](https://api.vocata.com/swagger-ui.html)

          ### 🔧 部署信息
          - **构建编号**: ${{ github.run_id }}
          - **提交哈希**: ${{ github.sha }}
          - **发版时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ### 📋 回滚说明
          如需回滚到此版本，请在生产服务器执行：
          ```bash
          cd /home/deploy/vocata
          ./rollback.sh ${{ needs.build-and-push.outputs.version }}
          ```

          ---
          🤖 由 GitHub Actions 自动生成
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}